<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
  		    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
  		    http://www.springframework.org/schema/context
  		    http://www.springframework.org/schema/context/spring-context-3.0.xsd
  		    http://www.springframework.org/schema/mvc
  		    http://www.springframework.org/schema/mvc/spring-mvc.xsd
  		    http://www.springframework.org/schema/security/oauth2
  		    http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd
  		    http://www.springframework.org/schema/security
  		    http://www.springframework.org/schema/security/spring-security-3.2.xsd">
    <!--
                    http://www.springframework.org/schema/security
                    http://www.springframework.org/schema/security/spring-security-3.0.3.xsd">
        -->

    <!-- Add here beans related to the web context -->


    <!-- Annotation based controllers -->
    <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"/>
    <context:component-scan base-package="org.openmrs.module.oauth2.web.controller"/>
    <mvc:annotation-driven/>

    <!--Begin Spring Security configurations-->


    <!--Web/HTTP Security Configuration-->
    <security:http auto-config="true" pattern="/**" use-expressions="true">
        <!--
         <security:intercept-url pattern="/module/oauth2/**" access="hasRole('ROLE_USER')"/>
        -->
        <security:intercept-url pattern="/module/fhir/**" access="hasRole('ROLE_USER')"/>
        <security:intercept-url pattern="/module/basicmodule/**" access="hasRole('ROLE_USER')"/>
    </security:http>

    <security:authentication-manager>
        <security:authentication-provider>
            <security:user-service>
            <security:user name="bob" authorities="ROLE_USER" password="bob"/>
            </security:user-service>
        </security:authentication-provider>
    </security:authentication-manager>
    <!--
        <oauth:authorization-server client-details-service-ref="clientDetails" token-services-ref="tokenServices"
                                    user-approval-handler-ref="userApprovalHandler">
            <oauth:authorization-code/>
            <oauth:implicit/>
            <oauth:refresh-token/>
            <oauth:client-credentials/>
            <oauth:password/>
        </oauth:authorization-server>

        <oauth:client-details-service id="clientDetails">
            <oauth:client client-id="my-trusted-client"
                          authorized-grant-types="password,authorization_code,refresh_token,implicit"
                          authorities="ROLE_CLIENT, ROLE_TRUSTED_CLIENT" scope="read,write,trust"
                          access-token-validity="60"/>
            <oauth:client client-id="my-trusted-client-with-secret"
                          authorized-grant-types="password,authorization_code,refresh_token,implicit"
                          secret="somesecret" authorities="ROLE_CLIENT, ROLE_TRUSTED_CLIENT"/>
            <oauth:client client-id="my-client-with-secret" authorized-grant-types="client_credentials"
                          authorities="ROLE_CLIENT"
                          scope="read" secret="secret"/>
            <oauth:client client-id="my-less-trusted-client" authorized-grant-types="authorization_code,implicit"
                          authorities="ROLE_CLIENT"/>
            <oauth:client client-id="my-less-trusted-autoapprove-client" authorized-grant-types="implicit"
                          authorities="ROLE_CLIENT" scope="read,write,trust"/>
            <oauth:client client-id="my-client-with-registered-redirect"
                          authorized-grant-types="authorization_code,client_credentials"
                          authorities="ROLE_CLIENT" redirect-uri="http://anywhere?key=value" scope="read,trust"/>
            <oauth:client client-id="my-untrusted-client-with-registered-redirect"
                          authorized-grant-types="authorization_code"
                          authorities="ROLE_CLIENT" redirect-uri="http://anywhere" scope="read"/>
            <oauth:client client-id="tonr" resource-ids="sparklr" authorized-grant-types="authorization_code,implicit"
                          authorities="ROLE_CLIENT" scope="read,write" secret="secret"/>
        </oauth:client-details-service>

        <bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.InMemoryTokenStore"/>

        <bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
            <property name="tokenStore" ref="tokenStore"/>
            <property name="supportRefreshToken" value="true"/>
            <property name="clientDetailsService" ref="clientDetails"/>
        </bean>
    -->

</beans>
